<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.wolfcode.wms.mapper.ProductStockMapper">
  <resultMap id="BaseResultMap" type="cn.wolfcode.wms.domain.ProductStock">
    <id column="id" property="id" />
    <result column="price" property="price" />
    <result column="storeNumber" property="storeNumber" />
    <result column="amount" property="amount" />
    <collection property="depot" javaType="Depot" columnPrefix="d_">
      <result column="name" property="name"/>
    </collection>
    <collection property="product" javaType="Product" columnPrefix="p_">
      <result column="sn" property="sn"/>
      <result column="name" property="name"/>
      <result column="brandName" property="brandName"/>
    </collection>
  </resultMap>
  <insert id="insert" keyProperty="id" useGeneratedKeys="true">
    insert into productstock (price, storeNumber, amount, product_id, depot_id)
    values (#{price}, #{storeNumber}, #{amount}, #{product.id}, #{depot.id})
  </insert>
  <update id="updateByPrimaryKey">
    update productstock
    set price = #{price},
      storeNumber = #{storeNumber},
      amount = #{amount}
    where id = #{id}
  </update>
  <select id="selectByDepotIdAndProductId" resultMap="BaseResultMap">
    <include refid="base_column"/>
    <include refid="base_table"/>
    where ps.depot_id = #{depotId} and ps.product_id = #{productId}
  </select>

  <select id="selectForCount" resultType="int">
    select count(*)
    <include refid="base_table"/>
    <include refid="base_where"/>
  </select>
  <select id="selectForList" resultMap="BaseResultMap">
    <include refid="base_column"/>
    <include refid="base_table"/>
    <include refid="base_where"/>
    limit #{start}, #{pageSize}
  </select>

  <sql id="base_column">
    select
      ps.id, ps.price, ps.storeNumber, ps.amount,
      d.name d_name,
      p.sn p_sn, p.`name` p_name, p.brandName p_brandName
  </sql>
  <sql id="base_table">
    from productstock ps
    join depot d on ps.depot_id = d.id
    join product p on ps.product_id = p.id
  </sql>
  <sql id="base_where">
    <where>
      <if test="keyword != null">
        and (p.name like concat('%', #{keyword}, '%') OR
             p.sn like concat('%', #{keyword}, '%'))
      </if>
      <if test="depotId > 0">
        and ps.depot_id = #{depotId}
      </if>
      <if test="brandId > 0">
        and p.brand_id = #{brandId}
      </if>
      <if test="warnNum != null">
        and ps.storeNumber &lt;= #{warnNum}
      </if>
    </where>
  </sql>
</mapper>